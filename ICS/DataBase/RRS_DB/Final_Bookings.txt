// 5. Journey Date & Train Search Loop
DateTime journeyDate;
DataTable trains;
while (true)
{
    // 5a. Input date or exit
    while (true)
    {
        Console.WriteLine();
        Console.Write("Journey Date (YYYY-MM-DD) : ");
        string dateInput = (Console.ReadLine() ?? "").Trim().ToLower();
        if (dateInput == "exit")
        {
            Console.WriteLine("Booking cancelled by user.");
            return;
        }
        if (DateTime.TryParse(dateInput, out journeyDate))
            break;

        Console.WriteLine("Invalid date format. Please enter date as YYYY-MM-DD.\n");
    }

    // 5b. Search trains
    trains = DataAccess.Instance.ExecuteTable(
        "sp_searchtrains",
        new SqlParameter("@sourcestationid", sourceId),
        new SqlParameter("@destinationstationid", destId),
        new SqlParameter("@journeydate", journeyDate),
        new SqlParameter("@seattype", seatType),
        new SqlParameter("@passengercount", passengerCount)
    );

    // ----------- YOUR REQUESTED CHANGE -----------
    if (trains.Rows.Count == 0)
    {
        Console.WriteLine("\nNo train on selected Date.");
        Console.WriteLine("Please re-enter the date or type 'exit' to cancel booking.\n");
        continue;
    }
    // ----------- END OF CHANGE -------------------

    // found trains → exit loop
    break;
}

// 6. Display available trains
Console.WriteLine("\nAvailable Trains:");
Console.WriteLine(new string('-', 100));
Console.WriteLine($"{"Train ID",-10} {"Train Name",-25} {"Dep",-8} {"Arr",-8} {"Seats",-6} {"Fare/Person",-12} {"Booking Status",-15}");
Console.WriteLine(new string('-', 100));

foreach (DataRow row in trains.Rows)
{
    Console.WriteLine(
        $"{row["train_id"],-10} " +
        $"{row["train_name"],-25} " +
        $"{row["departure_time"],-8} " +
        $"{row["arrival_time"],-8} " +
        $"{row["available_seats"],-6} " +
        $"₹{Convert.ToDecimal(row["fare_per_passenger"]),-11:N2} " +
        $"{row["booking_status"],-15}"
    );
}

Console.WriteLine(new string('-', 100));

// 7. Train selection or exit
int trainId;
var validTrainIds = new HashSet<int>();
foreach (DataRow row in trains.Rows)
    validTrainIds.Add(Convert.ToInt32(row["train_id"]));

while (true)
{
    Console.Write("\nEnter Train ID to book (or 0 to cancel): ");
    string trainInput = (Console.ReadLine() ?? "").Trim();
    if (trainInput == "0")
    {
        Console.WriteLine("Booking cancelled by user.");
        return;
    }
    if (int.TryParse(trainInput, out trainId) && validTrainIds.Contains(trainId))
        break;

    Console.WriteLine("Invalid Train ID. Please select from the listed trains or enter 0 to cancel.\n");
}

// --- Journey date validation function call ---
// THIS IS WHERE fn_isvalidjourneydate IS USED
var dtValid = DataAccess.Instance.ExecuteTable(
    "SELECT dbo.fn_isvalidjourneydate(@trainid, @journeydate) AS isvalid",
    new SqlParameter("@trainid", trainId),
    new SqlParameter("@journeydate", journeyDate)
);
bool isValid = dtValid.Rows.Count > 0 && Convert.ToInt32(dtValid.Rows[0]["isvalid"]) == 1;
if (!isValid)
{
    Console.WriteLine("Selected journey date is invalid for the chosen train. Please check the running days and try again.");
    return;
}
// --- End journey date validation ---
